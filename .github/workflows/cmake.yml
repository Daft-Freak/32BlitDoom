name: Build

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  build:

    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
#          - os: ubuntu-22.04
#            name: Linux
#            release-suffix: LIN64
#            cmake-args: -D32BLIT_DIR=$GITHUB_WORKSPACE/32blit-sdk
#            apt-packages: libsdl2-dev libsdl2-image-dev libsdl2-net-dev python3-setuptools

          - os: ubuntu-22.04
            name: STM32
            release-suffix: STM32
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/32blit-sdk/32blit.toolchain
            apt-packages: gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib python3-setuptools

    runs-on: ${{matrix.os}}

    env:
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name}}-${{matrix.release-suffix}}

    steps:
    # Check out the main repo
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: main

    # Check out the 32Blit API we build against
    - name: Checkout 32Blit API
      uses: actions/checkout@v4
      with:
        repository: 32blit/32blit-sdk
        path: 32blit-sdk

    # Linux dependencies
    - name: Install Linux deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt install ${{matrix.apt-packages}}
        pip3 install 32blit

    # Set up the cmake build environment
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/main/build

    # Ask cmake to build the makefiles
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/main/build
      run: cmake $GITHUB_WORKSPACE/main -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} ${{matrix.cmake-args}}

    # And then run the build itself
    - name: Build
      working-directory: ${{runner.workspace}}/main/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE -j 2

    # When it's a release, generate tar/zip files of the build
    - name: Package Release
      if: matrix.release-suffix != ''
      shell: bash
      working-directory: ${{runner.workspace}}/main/build
      run: |
        cmake --build . --target package

    # Push the tar file to the release
    - name: Upload tar
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: softprops/action-gh-release@v1
      with:
        files: ${{runner.workspace}}/main/build/${{env.RELEASE_FILE}}.tar.gz

    # Push the zip file to the release
    - name: Upload zip
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: softprops/action-gh-release@v1
      with:
        files: ${{runner.workspace}}/main/build/${{env.RELEASE_FILE}}.zip
        
    - name: Upload artifact
      if: github.event_name != 'release' && matrix.release-suffix != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE}}
        path: ${{runner.workspace}}/main/build/${{env.RELEASE_FILE}}.zip
