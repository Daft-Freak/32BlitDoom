name: CMake

on: 
  push:
  pull_request:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
#          - os: ubuntu-20.04
#            name: Linux
#            release-suffix: LIN64
#            cmake-args: -D32BLIT_PATH=$GITHUB_WORKSPACE/32blit/
#            apt-packages: libsdl2-dev libsdl2-image-dev python3-setuptools

          - os: ubuntu-20.04
            name: STM32
            release-suffix: STM32
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/32blit/32blit.toolchain
            apt-packages: gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib python3-setuptools

    runs-on: ${{matrix.os}}

    env:
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name}}-${{matrix.release-suffix}}

    steps:
    - uses: actions/checkout@v2

    # also checkout 32blit repo
    - name: Checkout 32blit
      uses: actions/checkout@master
      with:
        repository: pimoroni/32blit-beta
        path: 32blit
    
    # Linux deps
    - name: Install deps
      run: |
        sudo apt update && sudo apt install ${{matrix.apt-packages}}
        pip3 install 32blit

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=`pwd` ${{matrix.cmake-args}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: Package Release
      if: github.event_name == 'release' && matrix.release-suffix != ''
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake --build . --target install
        tar -zcf ${RELEASE_FILE}.tar.gz bin/
        7z a ${RELEASE_FILE}.zip bin/*

    - name: Upload tar
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.tar.gz
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.tar.gz
        asset_content_type: application/octet-stream #??

    - name: Upload zip
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.zip
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.zip
        asset_content_type: application/zip
